require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BasketItemsController, type: :controller do
  let(:user) { create :customer }
  before(:each) do
    sign_in user
  end

  # This should return the minimal set of attributes required to create a valid
  # BasketItem. As you add validations to BasketItem, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    build_attributes :basket_item, user: user
  end

  let(:invalid_attributes) do
    {
      quantity: -1
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BasketItemsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all basket_items as @basket_items" do
      basket_item = BasketItem.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:basket_items)).to eq([basket_item])
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) do
        { quantity: 2 }
      end

      it "updates the requested basket_item" do
        basket_item = BasketItem.create! valid_attributes
        put :update, { :id => basket_item.to_param, :basket_item => new_attributes }, valid_session
        basket_item.reload
        expect(basket_item.quantity).to eql 2
      end

      it "assigns the requested basket_item as @basket_item" do
        basket_item = BasketItem.create! valid_attributes
        put :update, { :id => basket_item.to_param, :basket_item => valid_attributes }, valid_session
        expect(assigns(:basket_item)).to eq(basket_item)
      end

      it "redirects to the basket_item" do
        basket_item = BasketItem.create! valid_attributes
        put :update, { :id => basket_item.to_param, :basket_item => valid_attributes }, valid_session
        expect(response).to redirect_to(basket_items_path)
      end
    end

    context "with invalid params" do
      it "assigns the basket_item as @basket_item" do
        basket_item = BasketItem.create! valid_attributes
        put :update, { :id => basket_item.to_param, :basket_item => invalid_attributes }, valid_session
        expect(assigns(:basket_item)).to eq(basket_item)
      end

      it "re-renders the 'edit' template" do
        basket_item = BasketItem.create! valid_attributes
        put :update, { :id => basket_item.to_param, :basket_item => invalid_attributes }, valid_session
        expect(response).to redirect_to basket_items_path
      end

      it "is not valid" do
        basket_item = BasketItem.create! valid_attributes
        put :update, { :id => basket_item.to_param, :basket_item => invalid_attributes }, valid_session
        expect(assigns(:basket_item)).to_not be_valid
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested basket_item" do
      basket_item = BasketItem.create! valid_attributes
      expect do
        delete :destroy, { :id => basket_item.to_param }, valid_session
      end.to change(BasketItem, :count).by(-1)
    end

    it "redirects to the basket_items list" do
      basket_item = BasketItem.create! valid_attributes
      delete :destroy, { :id => basket_item.to_param }, valid_session
      expect(response).to redirect_to(basket_items_path)
    end
  end

  describe "DELETE #empty" do
    it "destroys every item in the user's basket" do
      items = create_list :basket_item, 4, user: user
      delete :empty, {}, valid_session

      items.each do |i|
        expect { i.reload }.to raise_error ActiveRecord::RecordNotFound
      end
    end

    it "redirects to the basket items list" do
      create_list :basket_item, 4, user: user

      delete :empty, {}, valid_session
      expect(response).to redirect_to basket_items_path
    end
  end
end
